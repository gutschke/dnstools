#!/bin/bash -e

# For many "synchronous" DNS operations, an important primitive operation
# is the ability to increase the SOA serial number and to then wait for all
# slave DNS servers to see the change. This script performs the necessary
# operations to notify slaves and to wait for changes to propagate.

# Copyright 2016, Markus Gutschke

export LC_ALL=C
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Use lxc, if necessary
LXC=
if lxc info pdns >&/dev/null; then
  LXC="lxc exec pdns --"
fi

db="/var/lib/powerdns/pdns.sqlite3"
SQL_Escape() { printf '%s' "'${*//\'/\'\'}'"; }

dig() {
  local retry
  for retry in $(seq 10); do
    local ret="$($(type -fp dig) "$@")"
    local rc="$?"
    [[ "${ret}" =~ .*"SERVFAIL".* ]] || break
    sleep 6
  done
  echo "${ret}"
  return ${rc}
}

# Find the zones served by our DNS server.
[ $# -eq 0 ] && zones="$(pdns-list-all-zones master native)" || zones="$@"

for i in ${zones}; do
  master="$($LXC sqlite3 "${db}" "
            SELECT content
            FROM records
            WHERE type = 'NS' AND
                  domain_id IN (
                    SELECT id
                    FROM domains
                    WHERE name = $(SQL_Escape "$i")
                  ) AND 1 IN (
                    SELECT 1
                    FROM domains
                    WHERE InStr(records.content, domains.name) AND
                          domains.type != 'SLAVE')")"
  old="$(dig +short @"${master}" "${i}" SOA 2>/dev/null |
         awk '{ print $3 }')"
  $LXC pdnsutil increase-serial "${i}" >&/dev/null
  while :; do
    $LXC pdns_control purge "${i}" >&/dev/null || :
    $LXC pdnsutil rectify-zone "${i}" >&/dev/null || :
    ser="$(dig +short @"${master}" "${i}" SOA 2>/dev/null |
           awk '{ print $3 }')"
    [ "${old}" != "${ser}" ] && break
    sleep .5
  done
  nameservers="$($LXC sqlite3 "${db}" "
    SELECT content
    FROM records
    WHERE type = 'NS' AND domain_id IN (
      SELECT id
      FROM domains
      WHERE name = $(SQL_Escape "${i}"))")"
  for ns in ${nameservers}; do
    [[ "${master}" =~ .*"${ns}".* ]] && continue
    for j in $(seq 50); do
      [ "$(dig +time=8 +short @"${ns}" "${i}" SOA 2>/dev/null |
           awk '{ print $3 }')" != "${ser}" ] || break
      [ $((j%4)) -eq 1 ] &&
        $LXC pdns_control notify-host "${i}" "${ns}" >&/dev/null || :
      sleep $((1+(j%4)))
    done
  done
done

unbound-control reload >&/dev/null || :

exit 0
