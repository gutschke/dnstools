#!/usr/bin/env python2.7

# This script works similar to "pdnsutil list-zone". But in addition to
# reading from the underlying SQLite database, it can perform DNS queries
# to obtain the required data. Also, it makes some effort to pretty-print
# the zone file in a format that is readable to humans.

# Copyright 2016, Markus Gutschke

import StringIO
import copy
import dns.query
import dns.rdatatype
import dns.resolver
import dns.zone
import functools
import re
import sqlite3
import sys

# We accept exactly one command line argument
if len(sys.argv) != 2:
  sys.stderr.write('Usage: {} ZONE'.format(re.sub(r'.*/', '', sys.argv[0])))
  exit(1)
zone = sys.argv[1]

# Try loading the zone file directly from the local SQLite database. That's
# the most expedient solution, but obviously only works if we have direct
# access to the name server.
db = '/var/lib/powerdns/pdns.sqlite3'
lines = [ ]
try:
  # Need to verify that this is really a SQLite database before trying to
  # open it. Otherwise, SQLite might just decide to create a new database
  # in this file location.
  with open(db, 'rb') as fd:
    header = fd.read(100)
  if header[:16] == 'SQLite format 3\x00':
    with sqlite3.connect(db) as conn:
      lines = [
        # Only MX records have a "priority" field
        re.sub(r'^((?:\S*\s){3}(?!MX)\S*\s)(\S*\s)', r'\1',
        # All hostnames are fully qualified and need a trailing "period"
        re.sub(r'^(\S*)', r'\1.',
        # Put "period" after anything in "content" that looks like a valid
        # hostname.
        re.sub(r'^((?:\S*\s){5}(?:[_a-z][-a-z0-9]*\.)*[_a-z][-a-z0-9]*)$',
               r'\1.',
        # Flatten the database records into a text representation
        ' '.join([ str(r) for r in row ])))) for row in
        conn.cursor().execute(
          "SELECT name, ttl, 'IN', type, prio, content " +
          'FROM records ' +
          "WHERE type != '' AND domain_id IN" +
          '( SELECT id' +
          '  FROM domains' +
          '  WHERE name=?)' ,
          (zone,)) ]
  if len(lines) > 0:
    print(';; ZONE FILE READ FROM "{}"'.format(db))
except Exception:
  pass

# If we couldn't read from the database files, check if we can obtain the
# required information by performing a DNS lookup, instead.
if len(lines) < 1:
  # Find the authoritative name servers for this zone.
  ns = None
  try:
    ns = dns.resolver.query(zone, 'NS')
  except Exception:
    pass
  if ns == None or len(ns) < 1:
    sys.stderr.write(('Cannot fine records for zone "{}" in "{}", nor find ' +
                      'any authoritative nameservers.\n').format(zone, db))
    exit(1)

  # Try to do a zone transfer
  for server in ns:
    try:
      str = StringIO.StringIO()
      axfr = dns.zone.from_xfr(dns.query.xfr(server.to_text(), zone, timeout=10,
                                             lifetime=10, relativize=False),
                               relativize=False)
      axfr.to_file(str, relativize=False, nl='\n')
      lines = [ l for l in str.getvalue().splitlines() \
                if not re.match(r'(\S+\s+){3}(RRSIG|NSEC3?(PARAM)?|DNSKEY)', l) ]
      str.close()
      break
    except Exception:
      pass

  if len(lines) > 0:
    print(';; OBTAINED ZONE FILE BY AXFR TRANSFER FROM NAMESERVER')
  else:
    # AXFR didn't work. Let's see if we can get at least partial data
    # from an ANY query
    response = None
    try:
      request = dns.message.make_query(zone, dns.rdatatype.ANY)
      request.flags |= dns.flags.AD
      request.find_rrset(request.additional, dns.name.root, 65535,
                         dns.rdatatype.OPT, create=True, force_unique=True)
      ns = dns.resolver.get_default_resolver().nameservers
      for n in ns:
        try:
          response = dns.query.udp(request, n)
          if len(response.answer) > 0:
            response = response.answer
            break
          response = None
        except Exception:
          response = None
          pass
    except Exception:
      pass

    # Didn't receive any data back for our query. There really is nothing
    # left to do any more
    if not response:
      sys.stderr.write('Unable to do either AXFR zone transfer or ' +
                       'ANY query for "{}". Also no entries found in "{}" ' +
                       'database file.\n'.format(zone, db))
      exit(1)

    # Print a warning messages and then process the result set
    print(';; WARNING!!! THIS IS AN INCOMPLETE ZONE FILE\n' +
          ';; "AXFR" TRANSFER WAS DENIED. USED "ANY" QUERY INSTEAD')
    lines = [ l for rr in response for l in rr.to_text().splitlines() \
              if not re.match(r'(\S+\s+){3}(RRSIG|NSEC3?(PARAM)?|DNSKEY)',
                              rr.to_text()) ]

# Extract a list of known A records. This will be used in sorting
hosts = { }
for r in lines:
  f = r.split()
  if f[3] == 'A':
    hosts[f[0]] = f[4]

# Sort lines to be in a more human-friendly natural order
def cmp(a, b):
  f1 = a.split(None, 4)
  f2 = b.split(None, 4)
  result = 1
  # The zone name information should always be first. In particular, this means
  # that the SOA record is always the very first line
  if (f1[0] == zone + '.') != (f2[0] == zone + '.'):
    if f1[0] == zone + '.': result = -1
  # SRV resource records always come last
  elif (f1[3] == 'SRV') != (f2[3] == 'SRV'):
    if f2[3] == 'SRV': result = -1
  # The zone name information is followed by wild-card host names, if any
  elif f1[0].startswith('*') != f2[0].startswith('*'):
    if f1[0].startswith('*'): result = -1
  # Host names that define services come at the end
  elif f1[0].startswith('_') != f2[0].startswith('_'):
    if f2[0].startswith('_'): result = -1
  # Enforce additional ordering within a block of identical host names
  elif f1[0] == f2[0]:
    # Enforce a preferred order for common resource record types
    rr=['SOA', 'A', 'AAAA', 'CNAME', 'DNAME', 'NS', 'MX', 'TXT',
        'TLSA', 'SSHFP']
    x = y = len(rr)
    if f1[3] in rr: x=rr.index(f1[3])
    if f2[3] in rr: y=rr.index(f2[3])
    # For identical resource records, sort alphabetically (with exceptions)
    if x == y:
      if f1[3] == 'NS':
        # Name servers within our own zone should be listed first
        if f1[4].endswith(zone + '.') != f2[4].endswith(zone + '.'):
          if f1[4].endswith(zone + '.'): result = -1
        # Group by domain names, and then within domains sort by host name
        elif (re.sub(r'(.*)([.][^.]+){2}', r'\2\1', b) >
              re.sub(r'(.*)([.][^.]+){2}', r'\2\1', a)): result = -1
      elif a < b: result = -1
    elif x < y: result = -1
  else:
    # If this host has an A record, sort by IP address
    x = y = '~'
    if f1[0] in hosts: x = hosts[f1[0]]
    if f2[0] in hosts: y = hosts[f2[0]]
    # Everything else is sorted alphabetically (i.e. by host names)
    if x < y or f1[0] < f2[0]:
      result = -1
  return result
lines.sort(key=functools.cmp_to_key(cmp))

# Compute the widths of individual fields (after pruning, where possible)
widths = []
d = ['', '', '']
records = [ ]
for r in lines:
  f = r.rstrip().split(None, 4)
  # Remove zone name from host names
  if f[0].endswith('.' + zone + '.'):
    f[0] = f[0][:-len('.' + zone + '.')]
  elif f[0] == zone + '.':
    f[0] = '@'
  e = copy.copy(f)
  # Prune records that are identical to the line above
  for i in range(0, 3):
    if e[i] == d[i]:
      e[i] = ''
    elif i > 0:
      break
  # Update the maximum width per column
  for i in range(0, len(e)):
    if (len(widths) <= i): widths.append(0)
    if len(e[i]) > widths[i]:
      widths[i] = len(e[i])
  records.append(e)
  d = f
# Don't pad the very last field
widths[len(widths)-1] = 0

# Now, we are finally ready to output the human-readable zone file
p = None
print('$ORIGIN ' + zone + '.')
for r in records:
  # Insert blank lines in between groups
  if r[0] != '' and p == '': print
  p = r[0]

  # Assemble a full line from space-padded records
  l = ''
  for i in range(0, len(r)):
    l += r[i].ljust(widths[i] + 1)

  # Perform some amount of TAB compression in order to make it easier
  # to edit the file. Only do this for the first stretch of white
  # space in each line, though, as that's the one most likely to
  # benefit from it. N.B. this stretch of white-space might or might
  # not be preceded by a host name. That makes the math a little
  # convoluted.
  def compress(s):
    regex = re.match(r'^(\S*)(\s+)(.*)', s)
    group = [ regex.group(i) for i in range(0, 4) ]
    width = [ len(g) for g in group ]
    tabs  = ((width[1] % 8 != 0 and
              ((width[1] + 7) & ~7) < (width[1] + width[2])) +
             max(width[2] - ((8 - width[1]) & 7), 0) / 8)
    spcs  = (((width[1] + width[2]) & 7) -
             (tabs == 0)*(width[1] & 7))
    return group[1] + '\t'*tabs + ' '*spcs + group[3]
  print(compress(l))
